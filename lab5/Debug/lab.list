
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b4  080030b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030b4  080030b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b4  080030b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  0800312c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800312c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a834  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001855  00000000  00000000  0002a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178e8  00000000  00000000  0002d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008985  00000000  00000000  00045088  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a483  00000000  00000000  0004da0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000d7f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f58 	.word	0x08002f58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f58 	.word	0x08002f58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fdd6 	bl	8000d00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*Initialize the Scheduler */
  SCH_Init_T2();
 8000154:	f000 f950 	bl	80003f8 <SCH_Init_T2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f80e 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8c6 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000164:	f000 f84a 	bl	80001fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the timer */
  HAL_TIM_Base_Start_IT(&htim4);
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <main+0x28>)
 800016a:	f001 fd5b 	bl	8001c24 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 800016e:	f000 fbbf 	bl	80008f0 <SCH_Dispatch_Tasks>
 8000172:	e7fc      	b.n	800016e <main+0x22>
 8000174:	2000009c 	.word	0x2000009c

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 facc 	bl	8002724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019a:	2302      	movs	r3, #2
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a2:	2310      	movs	r3, #16
 80001a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001aa:	2300      	movs	r3, #0
 80001ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 f8c7 	bl	800134c <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c4:	f000 fc62 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fb32 	bl	800184c <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001ee:	f000 fc4d 	bl	8000a8c <Error_Handler>
  }
}
 80001f2:	bf00      	nop
 80001f4:	3740      	adds	r7, #64	; 0x40
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000218:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <MX_TIM4_Init+0x94>)
 800021a:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <MX_TIM4_Init+0x98>)
 800021c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 800021e:	4b1c      	ldr	r3, [pc, #112]	; (8000290 <MX_TIM4_Init+0x94>)
 8000220:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000224:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <MX_TIM4_Init+0x94>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 800022c:	4b18      	ldr	r3, [pc, #96]	; (8000290 <MX_TIM4_Init+0x94>)
 800022e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000232:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_TIM4_Init+0x94>)
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <MX_TIM4_Init+0x94>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <MX_TIM4_Init+0x94>)
 8000242:	f001 fc9f 	bl	8001b84 <HAL_TIM_Base_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800024c:	f000 fc1e 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	4619      	mov	r1, r3
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <MX_TIM4_Init+0x94>)
 800025e:	f001 fe3b 	bl	8001ed8 <HAL_TIM_ConfigClockSource>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000268:	f000 fc10 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800026c:	2300      	movs	r3, #0
 800026e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000274:	463b      	mov	r3, r7
 8000276:	4619      	mov	r1, r3
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <MX_TIM4_Init+0x94>)
 800027a:	f002 f801 	bl	8002280 <HAL_TIMEx_MasterConfigSynchronization>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000284:	f000 fc02 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	3718      	adds	r7, #24
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000009c 	.word	0x2000009c
 8000294:	40000800 	.word	0x40000800

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f002 f846 	bl	8002360 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 fbd7 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000016c 	.word	0x2000016c
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a38      	ldr	r2, [pc, #224]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a32      	ldr	r2, [pc, #200]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <MX_GPIO_Init+0xfc>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000360:	2200      	movs	r2, #0
 8000362:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000366:	4821      	ldr	r0, [pc, #132]	; (80003ec <MX_GPIO_Init+0x100>)
 8000368:	f000 ffb6 	bl	80012d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000372:	481f      	ldr	r0, [pc, #124]	; (80003f0 <MX_GPIO_Init+0x104>)
 8000374:	f000 ffb0 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_GPIO_Init+0x108>)
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	4818      	ldr	r0, [pc, #96]	; (80003f0 <MX_GPIO_Init+0x104>)
 800038e:	f000 fe49 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000392:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8000396:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2302      	movs	r3, #2
 80003a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4810      	ldr	r0, [pc, #64]	; (80003ec <MX_GPIO_Init+0x100>)
 80003ac:	f000 fe3a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <MX_GPIO_Init+0x104>)
 80003ca:	f000 fe2b 	bl	8001024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2100      	movs	r1, #0
 80003d2:	2028      	movs	r0, #40	; 0x28
 80003d4:	f000 fdef 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003d8:	2028      	movs	r0, #40	; 0x28
 80003da:	f000 fe08 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 80003de:	bf00      	nop
 80003e0:	3720      	adds	r7, #32
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40011000 	.word	0x40011000
 80003f4:	10110000 	.word	0x10110000

080003f8 <SCH_Init_T2>:

/* USER CODE BEGIN 4 */
void SCH_Init_T2(void) {
 80003f8:	b5b0      	push	{r4, r5, r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
   tByte i;
   for (i = 0; i < SCH_MAX_TASKS; i++)
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	e006      	b.n	8000412 <SCH_Init_T2+0x1a>
      {
	   SCH_Delete_Task(i);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fab8 	bl	800097c <SCH_Delete_Task>
   for (i = 0; i < SCH_MAX_TASKS; i++)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	3301      	adds	r3, #1
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d9f5      	bls.n	8000404 <SCH_Init_T2+0xc>
      }
   // Reset the global error variable
   // - SCH_Delete_Task() will generate an error code,
   //   (because the task array is empty)
   Error_code_G = 0;
 8000418:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SCH_Init_T2+0x8c>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
   uart_buf_len = sprintf(uart_buf, "ADD SUCCESFUL \r\n");
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <SCH_Init_T2+0x90>)
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SCH_Init_T2+0x94>)
 8000422:	4615      	mov	r5, r2
 8000424:	461c      	mov	r4, r3
 8000426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000428:	6028      	str	r0, [r5, #0]
 800042a:	6069      	str	r1, [r5, #4]
 800042c:	60aa      	str	r2, [r5, #8]
 800042e:	60eb      	str	r3, [r5, #12]
 8000430:	7823      	ldrb	r3, [r4, #0]
 8000432:	742b      	strb	r3, [r5, #16]
 8000434:	2210      	movs	r2, #16
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <SCH_Init_T2+0x98>)
 8000438:	601a      	str	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <SCH_Init_T2+0x98>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	b29a      	uxth	r2, r3
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	4911      	ldr	r1, [pc, #68]	; (8000488 <SCH_Init_T2+0x90>)
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <SCH_Init_T2+0x9c>)
 8000446:	f001 ffd8 	bl	80023fa <HAL_UART_Transmit>
   SCH_Add_Task(TaskA,1,1);
 800044a:	2201      	movs	r2, #1
 800044c:	2101      	movs	r1, #1
 800044e:	4812      	ldr	r0, [pc, #72]	; (8000498 <SCH_Init_T2+0xa0>)
 8000450:	f000 fa0a 	bl	8000868 <SCH_Add_Task>
   SCH_Add_Task(TaskB,2,1);
 8000454:	2201      	movs	r2, #1
 8000456:	2102      	movs	r1, #2
 8000458:	4810      	ldr	r0, [pc, #64]	; (800049c <SCH_Init_T2+0xa4>)
 800045a:	f000 fa05 	bl	8000868 <SCH_Add_Task>
   SCH_Add_Task(TaskC,3,1);
 800045e:	2201      	movs	r2, #1
 8000460:	2103      	movs	r1, #3
 8000462:	480f      	ldr	r0, [pc, #60]	; (80004a0 <SCH_Init_T2+0xa8>)
 8000464:	f000 fa00 	bl	8000868 <SCH_Add_Task>
   SCH_Add_Task(TaskD,4,1);
 8000468:	2201      	movs	r2, #1
 800046a:	2104      	movs	r1, #4
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <SCH_Init_T2+0xac>)
 800046e:	f000 f9fb 	bl	8000868 <SCH_Add_Task>
   SCH_Add_Task(TaskE,5,1);
 8000472:	2201      	movs	r2, #1
 8000474:	2105      	movs	r1, #5
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <SCH_Init_T2+0xb0>)
 8000478:	f000 f9f6 	bl	8000868 <SCH_Add_Task>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bdb0      	pop	{r4, r5, r7, pc}
 8000484:	2000008c 	.word	0x2000008c
 8000488:	20000138 	.word	0x20000138
 800048c:	08002f70 	.word	0x08002f70
 8000490:	20000134 	.word	0x20000134
 8000494:	2000016c 	.word	0x2000016c
 8000498:	080004ad 	.word	0x080004ad
 800049c:	0800053d 	.word	0x0800053d
 80004a0:	080005cd 	.word	0x080005cd
 80004a4:	0800065d 	.word	0x0800065d
 80004a8:	080006f1 	.word	0x080006f1

080004ac <TaskA>:

void TaskA(void){
 80004ac:	b5b0      	push	{r4, r5, r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2102      	movs	r1, #2
 80004b4:	481b      	ldr	r0, [pc, #108]	; (8000524 <TaskA+0x78>)
 80004b6:	f000 ff0f 	bl	80012d8 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "Task 0 is processing...");
 80004ba:	4a1b      	ldr	r2, [pc, #108]	; (8000528 <TaskA+0x7c>)
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <TaskA+0x80>)
 80004be:	4615      	mov	r5, r2
 80004c0:	461c      	mov	r4, r3
 80004c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004c4:	6028      	str	r0, [r5, #0]
 80004c6:	6069      	str	r1, [r5, #4]
 80004c8:	60aa      	str	r2, [r5, #8]
 80004ca:	60eb      	str	r3, [r5, #12]
 80004cc:	cc03      	ldmia	r4!, {r0, r1}
 80004ce:	6128      	str	r0, [r5, #16]
 80004d0:	6169      	str	r1, [r5, #20]
 80004d2:	2217      	movs	r2, #23
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <TaskA+0x84>)
 80004d6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <TaskA+0x84>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b29a      	uxth	r2, r3
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	4911      	ldr	r1, [pc, #68]	; (8000528 <TaskA+0x7c>)
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <TaskA+0x88>)
 80004e4:	f001 ff89 	bl	80023fa <HAL_UART_Transmit>
	HAL_Delay(1000);
 80004e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ec:	f000 fc6a 	bl	8000dc4 <HAL_Delay>
	uart_buf_len = sprintf(uart_buf, "Done\r\n");
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <TaskA+0x7c>)
 80004f2:	4a11      	ldr	r2, [pc, #68]	; (8000538 <TaskA+0x8c>)
 80004f4:	6810      	ldr	r0, [r2, #0]
 80004f6:	6018      	str	r0, [r3, #0]
 80004f8:	8891      	ldrh	r1, [r2, #4]
 80004fa:	7992      	ldrb	r2, [r2, #6]
 80004fc:	8099      	strh	r1, [r3, #4]
 80004fe:	719a      	strb	r2, [r3, #6]
 8000500:	2206      	movs	r2, #6
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <TaskA+0x84>)
 8000504:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <TaskA+0x84>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	b29a      	uxth	r2, r3
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	4906      	ldr	r1, [pc, #24]	; (8000528 <TaskA+0x7c>)
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <TaskA+0x88>)
 8000512:	f001 ff72 	bl	80023fa <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2102      	movs	r1, #2
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <TaskA+0x78>)
 800051c:	f000 fedc 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	bdb0      	pop	{r4, r5, r7, pc}
 8000524:	40010800 	.word	0x40010800
 8000528:	20000138 	.word	0x20000138
 800052c:	08002f84 	.word	0x08002f84
 8000530:	20000134 	.word	0x20000134
 8000534:	2000016c 	.word	0x2000016c
 8000538:	08002f9c 	.word	0x08002f9c

0800053c <TaskB>:

void TaskB(void){
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <TaskB+0x78>)
 8000546:	f000 fec7 	bl	80012d8 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "Task 1 is processing...");
 800054a:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <TaskB+0x7c>)
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <TaskB+0x80>)
 800054e:	4615      	mov	r5, r2
 8000550:	461c      	mov	r4, r3
 8000552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000554:	6028      	str	r0, [r5, #0]
 8000556:	6069      	str	r1, [r5, #4]
 8000558:	60aa      	str	r2, [r5, #8]
 800055a:	60eb      	str	r3, [r5, #12]
 800055c:	cc03      	ldmia	r4!, {r0, r1}
 800055e:	6128      	str	r0, [r5, #16]
 8000560:	6169      	str	r1, [r5, #20]
 8000562:	2217      	movs	r2, #23
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <TaskB+0x84>)
 8000566:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <TaskB+0x84>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	b29a      	uxth	r2, r3
 800056e:	2364      	movs	r3, #100	; 0x64
 8000570:	4911      	ldr	r1, [pc, #68]	; (80005b8 <TaskB+0x7c>)
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <TaskB+0x88>)
 8000574:	f001 ff41 	bl	80023fa <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fc22 	bl	8000dc4 <HAL_Delay>
	uart_buf_len = sprintf(uart_buf, "Done\r\n");
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <TaskB+0x7c>)
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <TaskB+0x8c>)
 8000584:	6810      	ldr	r0, [r2, #0]
 8000586:	6018      	str	r0, [r3, #0]
 8000588:	8891      	ldrh	r1, [r2, #4]
 800058a:	7992      	ldrb	r2, [r2, #6]
 800058c:	8099      	strh	r1, [r3, #4]
 800058e:	719a      	strb	r2, [r3, #6]
 8000590:	2206      	movs	r2, #6
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <TaskB+0x84>)
 8000594:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <TaskB+0x84>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b29a      	uxth	r2, r3
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	4906      	ldr	r1, [pc, #24]	; (80005b8 <TaskB+0x7c>)
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <TaskB+0x88>)
 80005a2:	f001 ff2a 	bl	80023fa <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <TaskB+0x78>)
 80005ac:	f000 fe94 	bl	80012d8 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}
 80005b4:	40010800 	.word	0x40010800
 80005b8:	20000138 	.word	0x20000138
 80005bc:	08002fa4 	.word	0x08002fa4
 80005c0:	20000134 	.word	0x20000134
 80005c4:	2000016c 	.word	0x2000016c
 80005c8:	08002f9c 	.word	0x08002f9c

080005cc <TaskC>:

void TaskC(void){
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <TaskC+0x78>)
 80005d6:	f000 fe7f 	bl	80012d8 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "Task 2 is processing...");
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <TaskC+0x7c>)
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <TaskC+0x80>)
 80005de:	4615      	mov	r5, r2
 80005e0:	461c      	mov	r4, r3
 80005e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e4:	6028      	str	r0, [r5, #0]
 80005e6:	6069      	str	r1, [r5, #4]
 80005e8:	60aa      	str	r2, [r5, #8]
 80005ea:	60eb      	str	r3, [r5, #12]
 80005ec:	cc03      	ldmia	r4!, {r0, r1}
 80005ee:	6128      	str	r0, [r5, #16]
 80005f0:	6169      	str	r1, [r5, #20]
 80005f2:	2217      	movs	r2, #23
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <TaskC+0x84>)
 80005f6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <TaskC+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	4911      	ldr	r1, [pc, #68]	; (8000648 <TaskC+0x7c>)
 8000602:	4814      	ldr	r0, [pc, #80]	; (8000654 <TaskC+0x88>)
 8000604:	f001 fef9 	bl	80023fa <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fbda 	bl	8000dc4 <HAL_Delay>
	uart_buf_len = sprintf(uart_buf, "Done\r\n");
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <TaskC+0x7c>)
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <TaskC+0x8c>)
 8000614:	6810      	ldr	r0, [r2, #0]
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	8891      	ldrh	r1, [r2, #4]
 800061a:	7992      	ldrb	r2, [r2, #6]
 800061c:	8099      	strh	r1, [r3, #4]
 800061e:	719a      	strb	r2, [r3, #6]
 8000620:	2206      	movs	r2, #6
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <TaskC+0x84>)
 8000624:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <TaskC+0x84>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b29a      	uxth	r2, r3
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	4906      	ldr	r1, [pc, #24]	; (8000648 <TaskC+0x7c>)
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <TaskC+0x88>)
 8000632:	f001 fee2 	bl	80023fa <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4802      	ldr	r0, [pc, #8]	; (8000644 <TaskC+0x78>)
 800063c:	f000 fe4c 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	bdb0      	pop	{r4, r5, r7, pc}
 8000644:	40010800 	.word	0x40010800
 8000648:	20000138 	.word	0x20000138
 800064c:	08002fbc 	.word	0x08002fbc
 8000650:	20000134 	.word	0x20000134
 8000654:	2000016c 	.word	0x2000016c
 8000658:	08002f9c 	.word	0x08002f9c

0800065c <TaskD>:

void TaskD(void){
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	481c      	ldr	r0, [pc, #112]	; (80006d8 <TaskD+0x7c>)
 8000668:	f000 fe36 	bl	80012d8 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "Task 3 is processing...");
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <TaskD+0x80>)
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <TaskD+0x84>)
 8000670:	4615      	mov	r5, r2
 8000672:	461c      	mov	r4, r3
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	6028      	str	r0, [r5, #0]
 8000678:	6069      	str	r1, [r5, #4]
 800067a:	60aa      	str	r2, [r5, #8]
 800067c:	60eb      	str	r3, [r5, #12]
 800067e:	cc03      	ldmia	r4!, {r0, r1}
 8000680:	6128      	str	r0, [r5, #16]
 8000682:	6169      	str	r1, [r5, #20]
 8000684:	2217      	movs	r2, #23
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <TaskD+0x88>)
 8000688:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <TaskD+0x88>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	4912      	ldr	r1, [pc, #72]	; (80006dc <TaskD+0x80>)
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <TaskD+0x8c>)
 8000696:	f001 feb0 	bl	80023fa <HAL_UART_Transmit>
	HAL_Delay(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069e:	f000 fb91 	bl	8000dc4 <HAL_Delay>
	uart_buf_len = sprintf(uart_buf, "Done\r\n");
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <TaskD+0x80>)
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <TaskD+0x90>)
 80006a6:	6810      	ldr	r0, [r2, #0]
 80006a8:	6018      	str	r0, [r3, #0]
 80006aa:	8891      	ldrh	r1, [r2, #4]
 80006ac:	7992      	ldrb	r2, [r2, #6]
 80006ae:	8099      	strh	r1, [r3, #4]
 80006b0:	719a      	strb	r2, [r3, #6]
 80006b2:	2206      	movs	r2, #6
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <TaskD+0x88>)
 80006b6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <TaskD+0x88>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	4906      	ldr	r1, [pc, #24]	; (80006dc <TaskD+0x80>)
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <TaskD+0x8c>)
 80006c4:	f001 fe99 	bl	80023fa <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TaskD+0x7c>)
 80006d0:	f000 fe02 	bl	80012d8 <HAL_GPIO_WritePin>
}
 80006d4:	bf00      	nop
 80006d6:	bdb0      	pop	{r4, r5, r7, pc}
 80006d8:	40010800 	.word	0x40010800
 80006dc:	20000138 	.word	0x20000138
 80006e0:	08002fd4 	.word	0x08002fd4
 80006e4:	20000134 	.word	0x20000134
 80006e8:	2000016c 	.word	0x2000016c
 80006ec:	08002f9c 	.word	0x08002f9c

080006f0 <TaskE>:

void TaskE(void){
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	481c      	ldr	r0, [pc, #112]	; (800076c <TaskE+0x7c>)
 80006fc:	f000 fdec 	bl	80012d8 <HAL_GPIO_WritePin>
	uart_buf_len = sprintf(uart_buf, "Task 4 is processing...");
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <TaskE+0x80>)
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <TaskE+0x84>)
 8000704:	4615      	mov	r5, r2
 8000706:	461c      	mov	r4, r3
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	6028      	str	r0, [r5, #0]
 800070c:	6069      	str	r1, [r5, #4]
 800070e:	60aa      	str	r2, [r5, #8]
 8000710:	60eb      	str	r3, [r5, #12]
 8000712:	cc03      	ldmia	r4!, {r0, r1}
 8000714:	6128      	str	r0, [r5, #16]
 8000716:	6169      	str	r1, [r5, #20]
 8000718:	2217      	movs	r2, #23
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <TaskE+0x88>)
 800071c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <TaskE+0x88>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	4912      	ldr	r1, [pc, #72]	; (8000770 <TaskE+0x80>)
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <TaskE+0x8c>)
 800072a:	f001 fe66 	bl	80023fa <HAL_UART_Transmit>
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 fb47 	bl	8000dc4 <HAL_Delay>
	uart_buf_len = sprintf(uart_buf, "Done\r\n");
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <TaskE+0x80>)
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <TaskE+0x90>)
 800073a:	6810      	ldr	r0, [r2, #0]
 800073c:	6018      	str	r0, [r3, #0]
 800073e:	8891      	ldrh	r1, [r2, #4]
 8000740:	7992      	ldrb	r2, [r2, #6]
 8000742:	8099      	strh	r1, [r3, #4]
 8000744:	719a      	strb	r2, [r3, #6]
 8000746:	2206      	movs	r2, #6
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <TaskE+0x88>)
 800074a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <TaskE+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	b29a      	uxth	r2, r3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <TaskE+0x80>)
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <TaskE+0x8c>)
 8000758:	f001 fe4f 	bl	80023fa <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <TaskE+0x7c>)
 8000764:	f000 fdb8 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	bdb0      	pop	{r4, r5, r7, pc}
 800076c:	40010800 	.word	0x40010800
 8000770:	20000138 	.word	0x20000138
 8000774:	08002fec 	.word	0x08002fec
 8000778:	20000134 	.word	0x20000134
 800077c:	2000016c 	.word	0x2000016c
 8000780:	08002f9c 	.word	0x08002f9c

08000784 <SCH_Update>:

void SCH_Update(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	tByte Index;
// NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e059      	b.n	8000844 <SCH_Update+0xc0>
		// Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a30      	ldr	r2, [pc, #192]	; (8000854 <SCH_Update+0xd0>)
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4413      	add	r3, r2
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d04f      	beq.n	800083e <SCH_Update+0xba>
			uart_buf_len = sprintf(uart_buf, "Task %d. Remaining %d \r\n",Index,SCH_tasks_G[Index].Delay);
 800079e:	79f9      	ldrb	r1, [r7, #7]
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <SCH_Update+0xd0>)
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	4413      	add	r3, r2
 80007a8:	3304      	adds	r3, #4
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	460a      	mov	r2, r1
 80007ae:	492a      	ldr	r1, [pc, #168]	; (8000858 <SCH_Update+0xd4>)
 80007b0:	482a      	ldr	r0, [pc, #168]	; (800085c <SCH_Update+0xd8>)
 80007b2:	f001 ffbf 	bl	8002734 <siprintf>
 80007b6:	4602      	mov	r2, r0
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SCH_Update+0xdc>)
 80007ba:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SCH_Update+0xdc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	4925      	ldr	r1, [pc, #148]	; (800085c <SCH_Update+0xd8>)
 80007c6:	4827      	ldr	r0, [pc, #156]	; (8000864 <SCH_Update+0xe0>)
 80007c8:	f001 fe17 	bl	80023fa <HAL_UART_Transmit>
			if (SCH_tasks_G[Index].Delay == 0) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SCH_Update+0xd0>)
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4413      	add	r3, r2
 80007d4:	3304      	adds	r3, #4
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d123      	bne.n	8000824 <SCH_Update+0xa0>
				// The task is due to run
				SCH_tasks_G[Index].RunMe += 1; // Inc. the 'RunMe' flag
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <SCH_Update+0xd0>)
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4413      	add	r3, r2
 80007e4:	330c      	adds	r3, #12
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	3201      	adds	r2, #1
 80007ec:	b2d1      	uxtb	r1, r2
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <SCH_Update+0xd0>)
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	4413      	add	r3, r2
 80007f4:	330c      	adds	r3, #12
 80007f6:	460a      	mov	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <SCH_Update+0xd0>)
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	4413      	add	r3, r2
 8000802:	3308      	adds	r3, #8
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d019      	beq.n	800083e <SCH_Update+0xba>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4911      	ldr	r1, [pc, #68]	; (8000854 <SCH_Update+0xd0>)
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	440a      	add	r2, r1
 8000814:	3208      	adds	r2, #8
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	490e      	ldr	r1, [pc, #56]	; (8000854 <SCH_Update+0xd0>)
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	440b      	add	r3, r1
 800081e:	3304      	adds	r3, #4
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e00c      	b.n	800083e <SCH_Update+0xba>
				}
			} else {
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <SCH_Update+0xd0>)
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	4413      	add	r3, r2
 800082c:	3304      	adds	r3, #4
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	3a01      	subs	r2, #1
 8000834:	4907      	ldr	r1, [pc, #28]	; (8000854 <SCH_Update+0xd0>)
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	440b      	add	r3, r1
 800083a:	3304      	adds	r3, #4
 800083c:	601a      	str	r2, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3301      	adds	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b04      	cmp	r3, #4
 8000848:	d9a2      	bls.n	8000790 <SCH_Update+0xc>
			}
		}
	}
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000e4 	.word	0x200000e4
 8000858:	08003004 	.word	0x08003004
 800085c:	20000138 	.word	0x20000138
 8000860:	20000134 	.word	0x20000134
 8000864:	2000016c 	.word	0x2000016c

08000868 <SCH_Add_Task>:

tByte SCH_Add_Task(void (* pFunction)(), const tWord DELAY, const tWord PERIOD) {
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
	tByte Index = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	75fb      	strb	r3, [r7, #23]
// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000878:	e002      	b.n	8000880 <SCH_Add_Task+0x18>
		Index++;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	3301      	adds	r3, #1
 800087e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <SCH_Add_Task+0x80>)
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <SCH_Add_Task+0x2c>
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d9f2      	bls.n	800087a <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {// Have we reached the end of the list?
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	2b05      	cmp	r3, #5
 8000898:	d104      	bne.n	80008a4 <SCH_Add_Task+0x3c>
// Task list is full, Set the global error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <SCH_Add_Task+0x84>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS; // Also return an error code
 80008a0:	2305      	movs	r3, #5
 80008a2:	e01b      	b.n	80008dc <SCH_Add_Task+0x74>
	}
// If we're here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <SCH_Add_Task+0x80>)
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	4413      	add	r3, r2
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80008b0:	7dfb      	ldrb	r3, [r7, #23]
 80008b2:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <SCH_Add_Task+0x80>)
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	4413      	add	r3, r2
 80008b8:	3304      	adds	r3, #4
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <SCH_Add_Task+0x80>)
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4413      	add	r3, r2
 80008c6:	3308      	adds	r3, #8
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <SCH_Add_Task+0x80>)
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	4413      	add	r3, r2
 80008d4:	330c      	adds	r3, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
	return Index; // return position of task (to allow later deletion)
 80008da:	7dfb      	ldrb	r3, [r7, #23]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200000e4 	.word	0x200000e4
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	tByte Index;
	// Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	e030      	b.n	800095e <SCH_Dispatch_Tasks+0x6e>
		if (SCH_tasks_G[Index].RunMe > 0) {
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <SCH_Dispatch_Tasks+0x84>)
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	4413      	add	r3, r2
 8000904:	330c      	adds	r3, #12
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d025      	beq.n	8000958 <SCH_Dispatch_Tasks+0x68>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2120      	movs	r1, #32
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <SCH_Dispatch_Tasks+0x88>)
 8000912:	f000 fce1 	bl	80012d8 <HAL_GPIO_WritePin>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4a16      	ldr	r2, [pc, #88]	; (8000974 <SCH_Dispatch_Tasks+0x84>)
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <SCH_Dispatch_Tasks+0x84>)
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	4413      	add	r3, r2
 800092a:	330c      	adds	r3, #12
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	3a01      	subs	r2, #1
 8000932:	b2d1      	uxtb	r1, r2
 8000934:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <SCH_Dispatch_Tasks+0x84>)
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	4413      	add	r3, r2
 800093a:	330c      	adds	r3, #12
 800093c:	460a      	mov	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// - if this is a 'one shot' task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0) SCH_Delete_Task(Index);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <SCH_Dispatch_Tasks+0x84>)
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	4413      	add	r3, r2
 8000948:	3308      	adds	r3, #8
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <SCH_Dispatch_Tasks+0x68>
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f812 	bl	800097c <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	3301      	adds	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d9cb      	bls.n	80008fc <SCH_Dispatch_Tasks+0xc>
		}
	}
	SCH_Report_Status(); // Report system status
 8000964:	f000 f876 	bl	8000a54 <SCH_Report_Status>
	SCH_Go_To_Sleep(); // The scheduler enters idle mode at this point
 8000968:	f000 f87a 	bl	8000a60 <SCH_Go_To_Sleep>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000e4 	.word	0x200000e4
 8000978:	40010800 	.word	0x40010800

0800097c <SCH_Delete_Task>:

bit SCH_Delete_Task(const tByte TASK_INDEX) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
   bit Return_code;
   if (SCH_tasks_G[TASK_INDEX].pTask == 0){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a2b      	ldr	r2, [pc, #172]	; (8000a38 <SCH_Delete_Task+0xbc>)
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4413      	add	r3, r2
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11e      	bne.n	80009d2 <SCH_Delete_Task+0x56>
      // No task at this location...
      // Set the global error variable
	   uart_buf_len = sprintf(uart_buf, "ERROR_SCH_CANNOT_DELETE_TASK \r\n");
 8000994:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <SCH_Delete_Task+0xc0>)
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <SCH_Delete_Task+0xc4>)
 8000998:	4614      	mov	r4, r2
 800099a:	461d      	mov	r5, r3
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099e:	6020      	str	r0, [r4, #0]
 80009a0:	6061      	str	r1, [r4, #4]
 80009a2:	60a2      	str	r2, [r4, #8]
 80009a4:	60e3      	str	r3, [r4, #12]
 80009a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a8:	6120      	str	r0, [r4, #16]
 80009aa:	6161      	str	r1, [r4, #20]
 80009ac:	61a2      	str	r2, [r4, #24]
 80009ae:	61e3      	str	r3, [r4, #28]
 80009b0:	221f      	movs	r2, #31
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <SCH_Delete_Task+0xc8>)
 80009b4:	601a      	str	r2, [r3, #0]
	   HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SCH_Delete_Task+0xc8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	491f      	ldr	r1, [pc, #124]	; (8000a3c <SCH_Delete_Task+0xc0>)
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <SCH_Delete_Task+0xcc>)
 80009c2:	f001 fd1a 	bl	80023fa <HAL_UART_Transmit>
	   Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SCH_Delete_Task+0xd0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	701a      	strb	r2, [r3, #0]
	   // ...also return an error code
	   Return_code = RETURN_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e001      	b.n	80009d6 <SCH_Delete_Task+0x5a>
      } else{
    	  Return_code = RETURN_NORMAL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
      }
   uart_buf_len = sprintf(uart_buf, "TASK %d DELETE \r\n", TASK_INDEX);
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	461a      	mov	r2, r3
 80009da:	491d      	ldr	r1, [pc, #116]	; (8000a50 <SCH_Delete_Task+0xd4>)
 80009dc:	4817      	ldr	r0, [pc, #92]	; (8000a3c <SCH_Delete_Task+0xc0>)
 80009de:	f001 fea9 	bl	8002734 <siprintf>
 80009e2:	4602      	mov	r2, r0
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SCH_Delete_Task+0xc8>)
 80009e6:	601a      	str	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <SCH_Delete_Task+0xc8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	4912      	ldr	r1, [pc, #72]	; (8000a3c <SCH_Delete_Task+0xc0>)
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <SCH_Delete_Task+0xcc>)
 80009f4:	f001 fd01 	bl	80023fa <HAL_UART_Transmit>
   SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <SCH_Delete_Task+0xbc>)
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	4413      	add	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
   SCH_tasks_G[TASK_INDEX].Delay   = 0;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <SCH_Delete_Task+0xbc>)
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
   SCH_tasks_G[TASK_INDEX].Period  = 0;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <SCH_Delete_Task+0xbc>)
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4413      	add	r3, r2
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
   SCH_tasks_G[TASK_INDEX].RunMe   = 0;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SCH_Delete_Task+0xbc>)
 8000a24:	011b      	lsls	r3, r3, #4
 8000a26:	4413      	add	r3, r2
 8000a28:	330c      	adds	r3, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
   return Return_code;       // return status
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	20000138 	.word	0x20000138
 8000a40:	08003020 	.word	0x08003020
 8000a44:	20000134 	.word	0x20000134
 8000a48:	2000016c 	.word	0x2000016c
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	08003040 	.word	0x08003040

08000a54 <SCH_Report_Status>:

void SCH_Report_Status(void) {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
		}
	}
#endif
	//uart_buf_len = sprintf(uart_buf, "ERROR CODE, %d \r\n", Error_code_G);
	//HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	//PCON
	// INTERUPT HTIM4
	//uart_buf_len = sprintf(uart_buf, "HET VIEC, DI NGU THOI \r\n");
	//HAL_UART_Transmit(&huart2, (uint8_t *) uart_buf, uart_buf_len, 100);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2120      	movs	r1, #32
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <SCH_Go_To_Sleep+0x14>)
 8000a6a:	f000 fc35 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010800 	.word	0x40010800

08000a78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000a80:	f7ff fe80 	bl	8000784 <SCH_Update>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201e      	movs	r0, #30
 8000b2c:	f000 fa43 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b30:	201e      	movs	r0, #30
 8000b32:	f000 fa5c 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40000800 	.word	0x40000800
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x70>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d123      	bne.n	8000bb0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	61d3      	str	r3, [r2, #28]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_UART_MspInit+0x74>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x78>)
 8000bac:	f000 fa3a 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <BusFault_Handler+0x4>

08000be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f8bc 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM4_IRQHandler+0x10>)
 8000c1e:	f001 f853 	bl	8001cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000009c 	.word	0x2000009c

08000c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 fb68 	bl	8001308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f001 fd30 	bl	80026d0 <__errno>
 8000c70:	4602      	mov	r2, r0
 8000c72:	230c      	movs	r3, #12
 8000c74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20005000 	.word	0x20005000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	200001b8 	.word	0x200001b8

08000ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cb6:	e003      	b.n	8000cc0 <LoopCopyDataInit>

08000cb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cbe:	3104      	adds	r1, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cc8:	d3f6      	bcc.n	8000cb8 <CopyDataInit>
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ccc:	e002      	b.n	8000cd4 <LoopFillZerobss>

08000cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cd0:	f842 3b04 	str.w	r3, [r2], #4

08000cd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cd8:	d3f9      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cda:	f7ff ffe5 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 fcfd 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fa33 	bl	800014c <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ce8:	080030bc 	.word	0x080030bc
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cf0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000cf4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000cf8:	200001b4 	.word	0x200001b4

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f945 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff febc 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f95d 	bl	800100a <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f925 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200001ac 	.word	0x200001ac

08000db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	200001ac 	.word	0x200001ac

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff fff0 	bl	8000db0 <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_Delay+0x40>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffe0 	bl	8000db0 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4906      	ldr	r1, [pc, #24]	; (8000ea0 <__NVIC_EnableIRQ+0x34>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff90 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff2d 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff42 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff90 	bl	8000ef8 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5f 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff35 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e127      	b.n	8001288 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001038:	2201      	movs	r2, #1
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8116 	bne.w	8001282 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b12      	cmp	r3, #18
 800105c:	d034      	beq.n	80010c8 <HAL_GPIO_Init+0xa4>
 800105e:	2b12      	cmp	r3, #18
 8001060:	d80d      	bhi.n	800107e <HAL_GPIO_Init+0x5a>
 8001062:	2b02      	cmp	r3, #2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x9a>
 8001066:	2b02      	cmp	r3, #2
 8001068:	d804      	bhi.n	8001074 <HAL_GPIO_Init+0x50>
 800106a:	2b00      	cmp	r3, #0
 800106c:	d031      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
 800106e:	2b01      	cmp	r3, #1
 8001070:	d01c      	beq.n	80010ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001072:	e048      	b.n	8001106 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001074:	2b03      	cmp	r3, #3
 8001076:	d043      	beq.n	8001100 <HAL_GPIO_Init+0xdc>
 8001078:	2b11      	cmp	r3, #17
 800107a:	d01b      	beq.n	80010b4 <HAL_GPIO_Init+0x90>
          break;
 800107c:	e043      	b.n	8001106 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800107e:	4a89      	ldr	r2, [pc, #548]	; (80012a4 <HAL_GPIO_Init+0x280>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d026      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
 8001084:	4a87      	ldr	r2, [pc, #540]	; (80012a4 <HAL_GPIO_Init+0x280>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d806      	bhi.n	8001098 <HAL_GPIO_Init+0x74>
 800108a:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_GPIO_Init+0x284>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d020      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
 8001090:	4a86      	ldr	r2, [pc, #536]	; (80012ac <HAL_GPIO_Init+0x288>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01d      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
          break;
 8001096:	e036      	b.n	8001106 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001098:	4a85      	ldr	r2, [pc, #532]	; (80012b0 <HAL_GPIO_Init+0x28c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
 800109e:	4a85      	ldr	r2, [pc, #532]	; (80012b4 <HAL_GPIO_Init+0x290>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d016      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
 80010a4:	4a84      	ldr	r2, [pc, #528]	; (80012b8 <HAL_GPIO_Init+0x294>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0xae>
          break;
 80010aa:	e02c      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e028      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	3304      	adds	r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e023      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	3308      	adds	r3, #8
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e01e      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	330c      	adds	r3, #12
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e019      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010da:	2304      	movs	r3, #4
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e012      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e8:	2308      	movs	r3, #8
 80010ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	611a      	str	r2, [r3, #16]
          break;
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f4:	2308      	movs	r3, #8
 80010f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	615a      	str	r2, [r3, #20]
          break;
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d801      	bhi.n	8001110 <HAL_GPIO_Init+0xec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	e001      	b.n	8001114 <HAL_GPIO_Init+0xf0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3304      	adds	r3, #4
 8001114:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2bff      	cmp	r3, #255	; 0xff
 800111a:	d802      	bhi.n	8001122 <HAL_GPIO_Init+0xfe>
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x104>
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	3b08      	subs	r3, #8
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	210f      	movs	r1, #15
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	401a      	ands	r2, r3
 800113a:	6a39      	ldr	r1, [r7, #32]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8096 	beq.w	8001282 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_GPIO_Init+0x298>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_GPIO_Init+0x298>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x298>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800116e:	4a54      	ldr	r2, [pc, #336]	; (80012c0 <HAL_GPIO_Init+0x29c>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_GPIO_Init+0x2a0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x19e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_GPIO_Init+0x2a4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x19a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a49      	ldr	r2, [pc, #292]	; (80012cc <HAL_GPIO_Init+0x2a8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x196>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <HAL_GPIO_Init+0x2ac>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x192>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x1a0>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x1a0>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x1a0>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x1a0>
 80011c2:	2300      	movs	r3, #0
 80011c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d4:	493a      	ldr	r1, [pc, #232]	; (80012c0 <HAL_GPIO_Init+0x29c>)
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4938      	ldr	r1, [pc, #224]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	43db      	mvns	r3, r3
 8001204:	4933      	ldr	r1, [pc, #204]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001206:	4013      	ands	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	492e      	ldr	r1, [pc, #184]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	43db      	mvns	r3, r3
 800122c:	4929      	ldr	r1, [pc, #164]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800122e:	4013      	ands	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4924      	ldr	r1, [pc, #144]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	43db      	mvns	r3, r3
 8001254:	491f      	ldr	r1, [pc, #124]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001256:	4013      	ands	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	491a      	ldr	r1, [pc, #104]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4915      	ldr	r1, [pc, #84]	; (80012d4 <HAL_GPIO_Init+0x2b0>)
 800127e:	4013      	ands	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f aed0 	bne.w	8001038 <HAL_GPIO_Init+0x14>
  }
}
 8001298:	bf00      	nop
 800129a:	372c      	adds	r7, #44	; 0x2c
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	10210000 	.word	0x10210000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	10120000 	.word	0x10120000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10320000 	.word	0x10320000
 80012b8:	10220000 	.word	0x10220000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	40011000 	.word	0x40011000
 80012d0:	40011400 	.word	0x40011400
 80012d4:	40010400 	.word	0x40010400

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f806 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e26c      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8087 	beq.w	800147a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800136c:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00c      	beq.n	8001392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001378:	4b8f      	ldr	r3, [pc, #572]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d112      	bne.n	80013aa <HAL_RCC_OscConfig+0x5e>
 8001384:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d10b      	bne.n	80013aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d06c      	beq.n	8001478 <HAL_RCC_OscConfig+0x12c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d168      	bne.n	8001478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e246      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x76>
 80013b4:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a7f      	ldr	r2, [pc, #508]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e02e      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x98>
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e01d      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0xbc>
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a71      	ldr	r2, [pc, #452]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6e      	ldr	r2, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e00b      	b.n	8001420 <HAL_RCC_OscConfig+0xd4>
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800140e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a67      	ldr	r2, [pc, #412]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d013      	beq.n	8001450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fcc2 	bl	8000db0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcbe 	bl	8000db0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1fa      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0xe4>
 800144e:	e014      	b.n	800147a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fcae 	bl	8000db0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fcaa 	bl	8000db0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1e6      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x10c>
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d063      	beq.n	800154e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d11c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x18c>
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d116      	bne.n	80014d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x176>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e1ba      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4939      	ldr	r1, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	e03a      	b.n	800154e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_RCC_OscConfig+0x270>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc63 	bl	8000db0 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc5f 	bl	8000db0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e19b      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x270>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fc42 	bl	8000db0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fc3e 	bl	8000db0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e17a      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03a      	beq.n	80015d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_RCC_OscConfig+0x274>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fc22 	bl	8000db0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fc1e 	bl	8000db0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e15a      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fada 	bl	8001b48 <RCC_Delay>
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x274>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fc08 	bl	8000db0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a2:	e00f      	b.n	80015c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc04 	bl	8000db0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d908      	bls.n	80015c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e140      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	42420000 	.word	0x42420000
 80015c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	4b9e      	ldr	r3, [pc, #632]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e9      	bne.n	80015a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a6 	beq.w	800172a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b97      	ldr	r3, [pc, #604]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b94      	ldr	r3, [pc, #592]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a93      	ldr	r2, [pc, #588]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b91      	ldr	r3, [pc, #580]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b8e      	ldr	r3, [pc, #568]	; (8001844 <HAL_RCC_OscConfig+0x4f8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a8a      	ldr	r2, [pc, #552]	; (8001844 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbc5 	bl	8000db0 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fbc1 	bl	8000db0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0fd      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x312>
 8001650:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a7a      	ldr	r2, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e02d      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x334>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a75      	ldr	r2, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a72      	ldr	r2, [pc, #456]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	e01c      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d10c      	bne.n	80016a2 <HAL_RCC_OscConfig+0x356>
 8001688:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e00b      	b.n	80016ba <HAL_RCC_OscConfig+0x36e>
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a66      	ldr	r2, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d015      	beq.n	80016ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb75 	bl	8000db0 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fb71 	bl	8000db0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0ab      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ee      	beq.n	80016ca <HAL_RCC_OscConfig+0x37e>
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb5f 	bl	8000db0 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fb5b 	bl	8000db0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e095      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d105      	bne.n	800172a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8081 	beq.w	8001836 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001734:	4b42      	ldr	r3, [pc, #264]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d061      	beq.n	8001804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d146      	bne.n	80017d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x4fc>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb2f 	bl	8000db0 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb2b 	bl	8000db0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e067      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	492d      	ldr	r1, [pc, #180]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a19      	ldr	r1, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	430b      	orrs	r3, r1
 80017a2:	4927      	ldr	r1, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x4fc>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff faff 	bl	8000db0 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fafb 	bl	8000db0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e037      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x46a>
 80017d4:	e02f      	b.n	8001836 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_RCC_OscConfig+0x4fc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fae8 	bl	8000db0 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fae4 	bl	8000db0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e020      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x498>
 8001802:	e018      	b.n	8001836 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e013      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	40007000 	.word	0x40007000
 8001848:	42420060 	.word	0x42420060

0800184c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0d0      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d910      	bls.n	8001890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4965      	ldr	r1, [pc, #404]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0b8      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	494d      	ldr	r1, [pc, #308]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d040      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d115      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e073      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06b      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4936      	ldr	r1, [pc, #216]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa38 	bl	8000db0 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa34 	bl	8000db0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e053      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d210      	bcs.n	800199c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4922      	ldr	r1, [pc, #136]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e032      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019da:	f000 f821 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019de:	4601      	mov	r1, r0
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	fa21 f303 	lsr.w	r3, r1, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1cc>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1d0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f996 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08003068 	.word	0x08003068
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b490      	push	{r4, r7}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a28:	1d3c      	adds	r4, r7, #4
 8001a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x46>
 8001a5e:	e02d      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a62:	623b      	str	r3, [r7, #32]
      break;
 8001a64:	e02d      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a72:	4413      	add	r3, r2
 8001a74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c5b      	lsrs	r3, r3, #17
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a92:	4413      	add	r3, r2
 8001a94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a9e:	fb02 f203 	mul.w	r2, r2, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	e004      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	623b      	str	r3, [r7, #32]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001abe:	623b      	str	r3, [r7, #32]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc90      	pop	{r4, r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	08003054 	.word	0x08003054
 8001ad4:	08003064 	.word	0x08003064
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	007a1200 	.word	0x007a1200
 8001ae0:	003d0900 	.word	0x003d0900

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff2 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b00:	4601      	mov	r1, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08003078 	.word	0x08003078

08001b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08003078 	.word	0x08003078

08001b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <RCC_Delay+0x34>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <RCC_Delay+0x38>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b64:	bf00      	nop
  }
  while (Delay --);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	60fa      	str	r2, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <RCC_Delay+0x1c>
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ffa6 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 fa64 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e03a      	b.n	8001cb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_Base_Start_IT+0x98>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x58>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c66:	d009      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x58>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x58>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d010      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	e007      	b.n	8001cb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0202 	mvn.w	r2, #2
 8001cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9a4 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f997 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f9a6 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0204 	mvn.w	r2, #4
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f97a 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f96d 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f97c 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0208 	mvn.w	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f950 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f943 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f952 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f926 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f919 	bl	8002046 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f928 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fe16 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa6b 	bl	800234e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ec 	bl	800207c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0220 	mvn.w	r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa36 	bl	800233c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0x18>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0a6      	b.n	800203e <HAL_TIM_ConfigClockSource+0x166>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d067      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0x120>
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d80b      	bhi.n	8001f44 <HAL_TIM_ConfigClockSource+0x6c>
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d073      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x140>
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d802      	bhi.n	8001f3a <HAL_TIM_ConfigClockSource+0x62>
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d06f      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f38:	e078      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d06c      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x140>
 8001f3e:	2b30      	cmp	r3, #48	; 0x30
 8001f40:	d06a      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f42:	e073      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f44:	2b70      	cmp	r3, #112	; 0x70
 8001f46:	d00d      	beq.n	8001f64 <HAL_TIM_ConfigClockSource+0x8c>
 8001f48:	2b70      	cmp	r3, #112	; 0x70
 8001f4a:	d804      	bhi.n	8001f56 <HAL_TIM_ConfigClockSource+0x7e>
 8001f4c:	2b50      	cmp	r3, #80	; 0x50
 8001f4e:	d033      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0xe0>
 8001f50:	2b60      	cmp	r3, #96	; 0x60
 8001f52:	d041      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f54:	e06a      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5a:	d066      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x152>
 8001f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f60:	d017      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f62:	e063      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f000 f965 	bl	8002242 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	609a      	str	r2, [r3, #8]
      break;
 8001f90:	e04c      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6899      	ldr	r1, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f000 f94e 	bl	8002242 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb4:	609a      	str	r2, [r3, #8]
      break;
 8001fb6:	e039      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f000 f8c5 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2150      	movs	r1, #80	; 0x50
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f91c 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8001fd6:	e029      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f000 f8e3 	bl	80021b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2160      	movs	r1, #96	; 0x60
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f90c 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8001ff6:	e019      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	461a      	mov	r2, r3
 8002006:	f000 f8a5 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f8fc 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8002016:	e009      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 f8f3 	bl	800220e <TIM_ITRx_SetConfig>
        break;
 8002028:	e000      	b.n	800202c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800202a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a29      	ldr	r2, [pc, #164]	; (8002148 <TIM_Base_SetConfig+0xb8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <TIM_Base_SetConfig+0x30>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d007      	beq.n	80020c0 <TIM_Base_SetConfig+0x30>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <TIM_Base_SetConfig+0xbc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0x30>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <TIM_Base_SetConfig+0xc0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <TIM_Base_SetConfig+0xb8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0x62>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0x62>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <TIM_Base_SetConfig+0xbc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x62>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a18      	ldr	r2, [pc, #96]	; (8002150 <TIM_Base_SetConfig+0xc0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <TIM_Base_SetConfig+0xb8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0201 	bic.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 030a 	bic.w	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f023 0210 	bic.w	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	621a      	str	r2, [r3, #32]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	f043 0307 	orr.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002242:	b480      	push	{r7}
 8002244:	b087      	sub	sp, #28
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002294:	2302      	movs	r3, #2
 8002296:	e046      	b.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d009      	beq.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10c      	bne.n	8002314 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4313      	orrs	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800

0800233c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e03f      	b.n	80023f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe fbde 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f905 	bl	80025b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b08a      	sub	sp, #40	; 0x28
 80023fe:	af02      	add	r7, sp, #8
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	d17c      	bne.n	8002514 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_UART_Transmit+0x2c>
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e075      	b.n	8002516 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_UART_Transmit+0x3e>
 8002434:	2302      	movs	r3, #2
 8002436:	e06e      	b.n	8002516 <HAL_UART_Transmit+0x11c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2221      	movs	r2, #33	; 0x21
 800244a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800244e:	f7fe fcaf 	bl	8000db0 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002468:	d108      	bne.n	800247c <HAL_UART_Transmit+0x82>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d104      	bne.n	800247c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e003      	b.n	8002484 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800248c:	e02a      	b.n	80024e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f840 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e036      	b.n	8002516 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10b      	bne.n	80024c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3302      	adds	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e007      	b.n	80024d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	3301      	adds	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1cf      	bne.n	800248e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f810 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252e:	e02c      	b.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d028      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0x30>
 800253e:	f7fe fc37 	bl	8000db0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	429a      	cmp	r2, r3
 800254c:	d21d      	bcs.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800255c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e00f      	b.n	80025aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d0c3      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ee:	f023 030c 	bic.w	r3, r3, #12
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <UART_SetConfig+0x114>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800261c:	f7ff fa80 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	e002      	b.n	800262a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002624:	f7ff fa68 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <UART_SetConfig+0x118>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	0119      	lsls	r1, r3, #4
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009a      	lsls	r2, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <UART_SetConfig+0x118>)
 8002662:	fba3 0302 	umull	r0, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2064      	movs	r0, #100	; 0x64
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	3332      	adds	r3, #50	; 0x32
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <UART_SetConfig+0x118>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002680:	4419      	add	r1, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fbb2 f2f3 	udiv	r2, r2, r3
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <UART_SetConfig+0x118>)
 800269a:	fba3 0302 	umull	r0, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	3332      	adds	r3, #50	; 0x32
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <UART_SetConfig+0x118>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	440a      	add	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013800 	.word	0x40013800
 80026cc:	51eb851f 	.word	0x51eb851f

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2500      	movs	r5, #0
 80026e0:	4e0c      	ldr	r6, [pc, #48]	; (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	; (8002718 <__libc_init_array+0x3c>)
 80026e4:	1ba4      	subs	r4, r4, r6
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a5      	cmp	r5, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	f000 fc34 	bl	8002f58 <_init>
 80026f0:	2500      	movs	r5, #0
 80026f2:	4e0a      	ldr	r6, [pc, #40]	; (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <__libc_init_array+0x44>)
 80026f6:	1ba4      	subs	r4, r4, r6
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a5      	cmp	r5, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002704:	4798      	blx	r3
 8002706:	3501      	adds	r5, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800270e:	4798      	blx	r3
 8002710:	3501      	adds	r5, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	080030b4 	.word	0x080030b4
 8002718:	080030b4 	.word	0x080030b4
 800271c:	080030b4 	.word	0x080030b4
 8002720:	080030b8 	.word	0x080030b8

08002724 <memset>:
 8002724:	4603      	mov	r3, r0
 8002726:	4402      	add	r2, r0
 8002728:	4293      	cmp	r3, r2
 800272a:	d100      	bne.n	800272e <memset+0xa>
 800272c:	4770      	bx	lr
 800272e:	f803 1b01 	strb.w	r1, [r3], #1
 8002732:	e7f9      	b.n	8002728 <memset+0x4>

08002734 <siprintf>:
 8002734:	b40e      	push	{r1, r2, r3}
 8002736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800273a:	b500      	push	{lr}
 800273c:	b09c      	sub	sp, #112	; 0x70
 800273e:	ab1d      	add	r3, sp, #116	; 0x74
 8002740:	9002      	str	r0, [sp, #8]
 8002742:	9006      	str	r0, [sp, #24]
 8002744:	9107      	str	r1, [sp, #28]
 8002746:	9104      	str	r1, [sp, #16]
 8002748:	4808      	ldr	r0, [pc, #32]	; (800276c <siprintf+0x38>)
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <siprintf+0x3c>)
 800274c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002750:	9105      	str	r1, [sp, #20]
 8002752:	6800      	ldr	r0, [r0, #0]
 8002754:	a902      	add	r1, sp, #8
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	f000 f866 	bl	8002828 <_svfiprintf_r>
 800275c:	2200      	movs	r2, #0
 800275e:	9b02      	ldr	r3, [sp, #8]
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	b01c      	add	sp, #112	; 0x70
 8002764:	f85d eb04 	ldr.w	lr, [sp], #4
 8002768:	b003      	add	sp, #12
 800276a:	4770      	bx	lr
 800276c:	2000000c 	.word	0x2000000c
 8002770:	ffff0208 	.word	0xffff0208

08002774 <__ssputs_r>:
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002778:	688e      	ldr	r6, [r1, #8]
 800277a:	4682      	mov	sl, r0
 800277c:	429e      	cmp	r6, r3
 800277e:	460c      	mov	r4, r1
 8002780:	4690      	mov	r8, r2
 8002782:	4699      	mov	r9, r3
 8002784:	d837      	bhi.n	80027f6 <__ssputs_r+0x82>
 8002786:	898a      	ldrh	r2, [r1, #12]
 8002788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800278c:	d031      	beq.n	80027f2 <__ssputs_r+0x7e>
 800278e:	2302      	movs	r3, #2
 8002790:	6825      	ldr	r5, [r4, #0]
 8002792:	6909      	ldr	r1, [r1, #16]
 8002794:	1a6f      	subs	r7, r5, r1
 8002796:	6965      	ldr	r5, [r4, #20]
 8002798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800279c:	fb95 f5f3 	sdiv	r5, r5, r3
 80027a0:	f109 0301 	add.w	r3, r9, #1
 80027a4:	443b      	add	r3, r7
 80027a6:	429d      	cmp	r5, r3
 80027a8:	bf38      	it	cc
 80027aa:	461d      	movcc	r5, r3
 80027ac:	0553      	lsls	r3, r2, #21
 80027ae:	d530      	bpl.n	8002812 <__ssputs_r+0x9e>
 80027b0:	4629      	mov	r1, r5
 80027b2:	f000 fb37 	bl	8002e24 <_malloc_r>
 80027b6:	4606      	mov	r6, r0
 80027b8:	b950      	cbnz	r0, 80027d0 <__ssputs_r+0x5c>
 80027ba:	230c      	movs	r3, #12
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f8ca 3000 	str.w	r3, [sl]
 80027c4:	89a3      	ldrh	r3, [r4, #12]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d0:	463a      	mov	r2, r7
 80027d2:	6921      	ldr	r1, [r4, #16]
 80027d4:	f000 fab6 	bl	8002d44 <memcpy>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e2:	81a3      	strh	r3, [r4, #12]
 80027e4:	6126      	str	r6, [r4, #16]
 80027e6:	443e      	add	r6, r7
 80027e8:	6026      	str	r6, [r4, #0]
 80027ea:	464e      	mov	r6, r9
 80027ec:	6165      	str	r5, [r4, #20]
 80027ee:	1bed      	subs	r5, r5, r7
 80027f0:	60a5      	str	r5, [r4, #8]
 80027f2:	454e      	cmp	r6, r9
 80027f4:	d900      	bls.n	80027f8 <__ssputs_r+0x84>
 80027f6:	464e      	mov	r6, r9
 80027f8:	4632      	mov	r2, r6
 80027fa:	4641      	mov	r1, r8
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	f000 faac 	bl	8002d5a <memmove>
 8002802:	68a3      	ldr	r3, [r4, #8]
 8002804:	2000      	movs	r0, #0
 8002806:	1b9b      	subs	r3, r3, r6
 8002808:	60a3      	str	r3, [r4, #8]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	441e      	add	r6, r3
 800280e:	6026      	str	r6, [r4, #0]
 8002810:	e7dc      	b.n	80027cc <__ssputs_r+0x58>
 8002812:	462a      	mov	r2, r5
 8002814:	f000 fb60 	bl	8002ed8 <_realloc_r>
 8002818:	4606      	mov	r6, r0
 800281a:	2800      	cmp	r0, #0
 800281c:	d1e2      	bne.n	80027e4 <__ssputs_r+0x70>
 800281e:	6921      	ldr	r1, [r4, #16]
 8002820:	4650      	mov	r0, sl
 8002822:	f000 fab3 	bl	8002d8c <_free_r>
 8002826:	e7c8      	b.n	80027ba <__ssputs_r+0x46>

08002828 <_svfiprintf_r>:
 8002828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282c:	461d      	mov	r5, r3
 800282e:	898b      	ldrh	r3, [r1, #12]
 8002830:	b09d      	sub	sp, #116	; 0x74
 8002832:	061f      	lsls	r7, r3, #24
 8002834:	4680      	mov	r8, r0
 8002836:	460c      	mov	r4, r1
 8002838:	4616      	mov	r6, r2
 800283a:	d50f      	bpl.n	800285c <_svfiprintf_r+0x34>
 800283c:	690b      	ldr	r3, [r1, #16]
 800283e:	b96b      	cbnz	r3, 800285c <_svfiprintf_r+0x34>
 8002840:	2140      	movs	r1, #64	; 0x40
 8002842:	f000 faef 	bl	8002e24 <_malloc_r>
 8002846:	6020      	str	r0, [r4, #0]
 8002848:	6120      	str	r0, [r4, #16]
 800284a:	b928      	cbnz	r0, 8002858 <_svfiprintf_r+0x30>
 800284c:	230c      	movs	r3, #12
 800284e:	f8c8 3000 	str.w	r3, [r8]
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
 8002856:	e0c8      	b.n	80029ea <_svfiprintf_r+0x1c2>
 8002858:	2340      	movs	r3, #64	; 0x40
 800285a:	6163      	str	r3, [r4, #20]
 800285c:	2300      	movs	r3, #0
 800285e:	9309      	str	r3, [sp, #36]	; 0x24
 8002860:	2320      	movs	r3, #32
 8002862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002866:	2330      	movs	r3, #48	; 0x30
 8002868:	f04f 0b01 	mov.w	fp, #1
 800286c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002870:	9503      	str	r5, [sp, #12]
 8002872:	4637      	mov	r7, r6
 8002874:	463d      	mov	r5, r7
 8002876:	f815 3b01 	ldrb.w	r3, [r5], #1
 800287a:	b10b      	cbz	r3, 8002880 <_svfiprintf_r+0x58>
 800287c:	2b25      	cmp	r3, #37	; 0x25
 800287e:	d13e      	bne.n	80028fe <_svfiprintf_r+0xd6>
 8002880:	ebb7 0a06 	subs.w	sl, r7, r6
 8002884:	d00b      	beq.n	800289e <_svfiprintf_r+0x76>
 8002886:	4653      	mov	r3, sl
 8002888:	4632      	mov	r2, r6
 800288a:	4621      	mov	r1, r4
 800288c:	4640      	mov	r0, r8
 800288e:	f7ff ff71 	bl	8002774 <__ssputs_r>
 8002892:	3001      	adds	r0, #1
 8002894:	f000 80a4 	beq.w	80029e0 <_svfiprintf_r+0x1b8>
 8002898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800289a:	4453      	add	r3, sl
 800289c:	9309      	str	r3, [sp, #36]	; 0x24
 800289e:	783b      	ldrb	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 809d 	beq.w	80029e0 <_svfiprintf_r+0x1b8>
 80028a6:	2300      	movs	r3, #0
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	9307      	str	r3, [sp, #28]
 80028b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028b8:	931a      	str	r3, [sp, #104]	; 0x68
 80028ba:	462f      	mov	r7, r5
 80028bc:	2205      	movs	r2, #5
 80028be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028c2:	4850      	ldr	r0, [pc, #320]	; (8002a04 <_svfiprintf_r+0x1dc>)
 80028c4:	f000 fa30 	bl	8002d28 <memchr>
 80028c8:	9b04      	ldr	r3, [sp, #16]
 80028ca:	b9d0      	cbnz	r0, 8002902 <_svfiprintf_r+0xda>
 80028cc:	06d9      	lsls	r1, r3, #27
 80028ce:	bf44      	itt	mi
 80028d0:	2220      	movmi	r2, #32
 80028d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028d6:	071a      	lsls	r2, r3, #28
 80028d8:	bf44      	itt	mi
 80028da:	222b      	movmi	r2, #43	; 0x2b
 80028dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028e0:	782a      	ldrb	r2, [r5, #0]
 80028e2:	2a2a      	cmp	r2, #42	; 0x2a
 80028e4:	d015      	beq.n	8002912 <_svfiprintf_r+0xea>
 80028e6:	462f      	mov	r7, r5
 80028e8:	2000      	movs	r0, #0
 80028ea:	250a      	movs	r5, #10
 80028ec:	9a07      	ldr	r2, [sp, #28]
 80028ee:	4639      	mov	r1, r7
 80028f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f4:	3b30      	subs	r3, #48	; 0x30
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d94d      	bls.n	8002996 <_svfiprintf_r+0x16e>
 80028fa:	b1b8      	cbz	r0, 800292c <_svfiprintf_r+0x104>
 80028fc:	e00f      	b.n	800291e <_svfiprintf_r+0xf6>
 80028fe:	462f      	mov	r7, r5
 8002900:	e7b8      	b.n	8002874 <_svfiprintf_r+0x4c>
 8002902:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <_svfiprintf_r+0x1dc>)
 8002904:	463d      	mov	r5, r7
 8002906:	1a80      	subs	r0, r0, r2
 8002908:	fa0b f000 	lsl.w	r0, fp, r0
 800290c:	4318      	orrs	r0, r3
 800290e:	9004      	str	r0, [sp, #16]
 8002910:	e7d3      	b.n	80028ba <_svfiprintf_r+0x92>
 8002912:	9a03      	ldr	r2, [sp, #12]
 8002914:	1d11      	adds	r1, r2, #4
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	9103      	str	r1, [sp, #12]
 800291a:	2a00      	cmp	r2, #0
 800291c:	db01      	blt.n	8002922 <_svfiprintf_r+0xfa>
 800291e:	9207      	str	r2, [sp, #28]
 8002920:	e004      	b.n	800292c <_svfiprintf_r+0x104>
 8002922:	4252      	negs	r2, r2
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	9207      	str	r2, [sp, #28]
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	783b      	ldrb	r3, [r7, #0]
 800292e:	2b2e      	cmp	r3, #46	; 0x2e
 8002930:	d10c      	bne.n	800294c <_svfiprintf_r+0x124>
 8002932:	787b      	ldrb	r3, [r7, #1]
 8002934:	2b2a      	cmp	r3, #42	; 0x2a
 8002936:	d133      	bne.n	80029a0 <_svfiprintf_r+0x178>
 8002938:	9b03      	ldr	r3, [sp, #12]
 800293a:	3702      	adds	r7, #2
 800293c:	1d1a      	adds	r2, r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	9203      	str	r2, [sp, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfb8      	it	lt
 8002946:	f04f 33ff 	movlt.w	r3, #4294967295
 800294a:	9305      	str	r3, [sp, #20]
 800294c:	4d2e      	ldr	r5, [pc, #184]	; (8002a08 <_svfiprintf_r+0x1e0>)
 800294e:	2203      	movs	r2, #3
 8002950:	7839      	ldrb	r1, [r7, #0]
 8002952:	4628      	mov	r0, r5
 8002954:	f000 f9e8 	bl	8002d28 <memchr>
 8002958:	b138      	cbz	r0, 800296a <_svfiprintf_r+0x142>
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	1b40      	subs	r0, r0, r5
 800295e:	fa03 f000 	lsl.w	r0, r3, r0
 8002962:	9b04      	ldr	r3, [sp, #16]
 8002964:	3701      	adds	r7, #1
 8002966:	4303      	orrs	r3, r0
 8002968:	9304      	str	r3, [sp, #16]
 800296a:	7839      	ldrb	r1, [r7, #0]
 800296c:	2206      	movs	r2, #6
 800296e:	4827      	ldr	r0, [pc, #156]	; (8002a0c <_svfiprintf_r+0x1e4>)
 8002970:	1c7e      	adds	r6, r7, #1
 8002972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002976:	f000 f9d7 	bl	8002d28 <memchr>
 800297a:	2800      	cmp	r0, #0
 800297c:	d038      	beq.n	80029f0 <_svfiprintf_r+0x1c8>
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <_svfiprintf_r+0x1e8>)
 8002980:	bb13      	cbnz	r3, 80029c8 <_svfiprintf_r+0x1a0>
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	3307      	adds	r3, #7
 8002986:	f023 0307 	bic.w	r3, r3, #7
 800298a:	3308      	adds	r3, #8
 800298c:	9303      	str	r3, [sp, #12]
 800298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002990:	444b      	add	r3, r9
 8002992:	9309      	str	r3, [sp, #36]	; 0x24
 8002994:	e76d      	b.n	8002872 <_svfiprintf_r+0x4a>
 8002996:	fb05 3202 	mla	r2, r5, r2, r3
 800299a:	2001      	movs	r0, #1
 800299c:	460f      	mov	r7, r1
 800299e:	e7a6      	b.n	80028ee <_svfiprintf_r+0xc6>
 80029a0:	2300      	movs	r3, #0
 80029a2:	250a      	movs	r5, #10
 80029a4:	4619      	mov	r1, r3
 80029a6:	3701      	adds	r7, #1
 80029a8:	9305      	str	r3, [sp, #20]
 80029aa:	4638      	mov	r0, r7
 80029ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b0:	3a30      	subs	r2, #48	; 0x30
 80029b2:	2a09      	cmp	r2, #9
 80029b4:	d903      	bls.n	80029be <_svfiprintf_r+0x196>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0c8      	beq.n	800294c <_svfiprintf_r+0x124>
 80029ba:	9105      	str	r1, [sp, #20]
 80029bc:	e7c6      	b.n	800294c <_svfiprintf_r+0x124>
 80029be:	fb05 2101 	mla	r1, r5, r1, r2
 80029c2:	2301      	movs	r3, #1
 80029c4:	4607      	mov	r7, r0
 80029c6:	e7f0      	b.n	80029aa <_svfiprintf_r+0x182>
 80029c8:	ab03      	add	r3, sp, #12
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4622      	mov	r2, r4
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_svfiprintf_r+0x1ec>)
 80029d0:	a904      	add	r1, sp, #16
 80029d2:	4640      	mov	r0, r8
 80029d4:	f3af 8000 	nop.w
 80029d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029dc:	4681      	mov	r9, r0
 80029de:	d1d6      	bne.n	800298e <_svfiprintf_r+0x166>
 80029e0:	89a3      	ldrh	r3, [r4, #12]
 80029e2:	065b      	lsls	r3, r3, #25
 80029e4:	f53f af35 	bmi.w	8002852 <_svfiprintf_r+0x2a>
 80029e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ea:	b01d      	add	sp, #116	; 0x74
 80029ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f0:	ab03      	add	r3, sp, #12
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4622      	mov	r2, r4
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_svfiprintf_r+0x1ec>)
 80029f8:	a904      	add	r1, sp, #16
 80029fa:	4640      	mov	r0, r8
 80029fc:	f000 f882 	bl	8002b04 <_printf_i>
 8002a00:	e7ea      	b.n	80029d8 <_svfiprintf_r+0x1b0>
 8002a02:	bf00      	nop
 8002a04:	08003080 	.word	0x08003080
 8002a08:	08003086 	.word	0x08003086
 8002a0c:	0800308a 	.word	0x0800308a
 8002a10:	00000000 	.word	0x00000000
 8002a14:	08002775 	.word	0x08002775

08002a18 <_printf_common>:
 8002a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	4691      	mov	r9, r2
 8002a1e:	461f      	mov	r7, r3
 8002a20:	688a      	ldr	r2, [r1, #8]
 8002a22:	690b      	ldr	r3, [r1, #16]
 8002a24:	4606      	mov	r6, r0
 8002a26:	4293      	cmp	r3, r2
 8002a28:	bfb8      	it	lt
 8002a2a:	4613      	movlt	r3, r2
 8002a2c:	f8c9 3000 	str.w	r3, [r9]
 8002a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a34:	460c      	mov	r4, r1
 8002a36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a3a:	b112      	cbz	r2, 8002a42 <_printf_common+0x2a>
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f8c9 3000 	str.w	r3, [r9]
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	0699      	lsls	r1, r3, #26
 8002a46:	bf42      	ittt	mi
 8002a48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a4c:	3302      	addmi	r3, #2
 8002a4e:	f8c9 3000 	strmi.w	r3, [r9]
 8002a52:	6825      	ldr	r5, [r4, #0]
 8002a54:	f015 0506 	ands.w	r5, r5, #6
 8002a58:	d107      	bne.n	8002a6a <_printf_common+0x52>
 8002a5a:	f104 0a19 	add.w	sl, r4, #25
 8002a5e:	68e3      	ldr	r3, [r4, #12]
 8002a60:	f8d9 2000 	ldr.w	r2, [r9]
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	42ab      	cmp	r3, r5
 8002a68:	dc29      	bgt.n	8002abe <_printf_common+0xa6>
 8002a6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	3300      	adds	r3, #0
 8002a72:	bf18      	it	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	0692      	lsls	r2, r2, #26
 8002a78:	d42e      	bmi.n	8002ad8 <_printf_common+0xc0>
 8002a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a7e:	4639      	mov	r1, r7
 8002a80:	4630      	mov	r0, r6
 8002a82:	47c0      	blx	r8
 8002a84:	3001      	adds	r0, #1
 8002a86:	d021      	beq.n	8002acc <_printf_common+0xb4>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	68e5      	ldr	r5, [r4, #12]
 8002a8c:	f003 0306 	and.w	r3, r3, #6
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	bf18      	it	ne
 8002a94:	2500      	movne	r5, #0
 8002a96:	f8d9 2000 	ldr.w	r2, [r9]
 8002a9a:	f04f 0900 	mov.w	r9, #0
 8002a9e:	bf08      	it	eq
 8002aa0:	1aad      	subeq	r5, r5, r2
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	6922      	ldr	r2, [r4, #16]
 8002aa6:	bf08      	it	eq
 8002aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bfc4      	itt	gt
 8002ab0:	1a9b      	subgt	r3, r3, r2
 8002ab2:	18ed      	addgt	r5, r5, r3
 8002ab4:	341a      	adds	r4, #26
 8002ab6:	454d      	cmp	r5, r9
 8002ab8:	d11a      	bne.n	8002af0 <_printf_common+0xd8>
 8002aba:	2000      	movs	r0, #0
 8002abc:	e008      	b.n	8002ad0 <_printf_common+0xb8>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4652      	mov	r2, sl
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	47c0      	blx	r8
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d103      	bne.n	8002ad4 <_printf_common+0xbc>
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	e7c2      	b.n	8002a5e <_printf_common+0x46>
 8002ad8:	2030      	movs	r0, #48	; 0x30
 8002ada:	18e1      	adds	r1, r4, r3
 8002adc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ae6:	4422      	add	r2, r4
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aee:	e7c4      	b.n	8002a7a <_printf_common+0x62>
 8002af0:	2301      	movs	r3, #1
 8002af2:	4622      	mov	r2, r4
 8002af4:	4639      	mov	r1, r7
 8002af6:	4630      	mov	r0, r6
 8002af8:	47c0      	blx	r8
 8002afa:	3001      	adds	r0, #1
 8002afc:	d0e6      	beq.n	8002acc <_printf_common+0xb4>
 8002afe:	f109 0901 	add.w	r9, r9, #1
 8002b02:	e7d8      	b.n	8002ab6 <_printf_common+0x9e>

08002b04 <_printf_i>:
 8002b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	7e09      	ldrb	r1, [r1, #24]
 8002b10:	b085      	sub	sp, #20
 8002b12:	296e      	cmp	r1, #110	; 0x6e
 8002b14:	4617      	mov	r7, r2
 8002b16:	4606      	mov	r6, r0
 8002b18:	4698      	mov	r8, r3
 8002b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b1c:	f000 80b3 	beq.w	8002c86 <_printf_i+0x182>
 8002b20:	d822      	bhi.n	8002b68 <_printf_i+0x64>
 8002b22:	2963      	cmp	r1, #99	; 0x63
 8002b24:	d036      	beq.n	8002b94 <_printf_i+0x90>
 8002b26:	d80a      	bhi.n	8002b3e <_printf_i+0x3a>
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	f000 80b9 	beq.w	8002ca0 <_printf_i+0x19c>
 8002b2e:	2958      	cmp	r1, #88	; 0x58
 8002b30:	f000 8083 	beq.w	8002c3a <_printf_i+0x136>
 8002b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b3c:	e032      	b.n	8002ba4 <_printf_i+0xa0>
 8002b3e:	2964      	cmp	r1, #100	; 0x64
 8002b40:	d001      	beq.n	8002b46 <_printf_i+0x42>
 8002b42:	2969      	cmp	r1, #105	; 0x69
 8002b44:	d1f6      	bne.n	8002b34 <_printf_i+0x30>
 8002b46:	6820      	ldr	r0, [r4, #0]
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	0605      	lsls	r5, r0, #24
 8002b4c:	f103 0104 	add.w	r1, r3, #4
 8002b50:	d52a      	bpl.n	8002ba8 <_printf_i+0xa4>
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6011      	str	r1, [r2, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da03      	bge.n	8002b62 <_printf_i+0x5e>
 8002b5a:	222d      	movs	r2, #45	; 0x2d
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b62:	486f      	ldr	r0, [pc, #444]	; (8002d20 <_printf_i+0x21c>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	e039      	b.n	8002bdc <_printf_i+0xd8>
 8002b68:	2973      	cmp	r1, #115	; 0x73
 8002b6a:	f000 809d 	beq.w	8002ca8 <_printf_i+0x1a4>
 8002b6e:	d808      	bhi.n	8002b82 <_printf_i+0x7e>
 8002b70:	296f      	cmp	r1, #111	; 0x6f
 8002b72:	d020      	beq.n	8002bb6 <_printf_i+0xb2>
 8002b74:	2970      	cmp	r1, #112	; 0x70
 8002b76:	d1dd      	bne.n	8002b34 <_printf_i+0x30>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	e003      	b.n	8002b8a <_printf_i+0x86>
 8002b82:	2975      	cmp	r1, #117	; 0x75
 8002b84:	d017      	beq.n	8002bb6 <_printf_i+0xb2>
 8002b86:	2978      	cmp	r1, #120	; 0x78
 8002b88:	d1d4      	bne.n	8002b34 <_printf_i+0x30>
 8002b8a:	2378      	movs	r3, #120	; 0x78
 8002b8c:	4865      	ldr	r0, [pc, #404]	; (8002d24 <_printf_i+0x220>)
 8002b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b92:	e055      	b.n	8002c40 <_printf_i+0x13c>
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b9a:	1d19      	adds	r1, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6011      	str	r1, [r2, #0]
 8002ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e08c      	b.n	8002cc2 <_printf_i+0x1be>
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bae:	6011      	str	r1, [r2, #0]
 8002bb0:	bf18      	it	ne
 8002bb2:	b21b      	sxthne	r3, r3
 8002bb4:	e7cf      	b.n	8002b56 <_printf_i+0x52>
 8002bb6:	6813      	ldr	r3, [r2, #0]
 8002bb8:	6825      	ldr	r5, [r4, #0]
 8002bba:	1d18      	adds	r0, r3, #4
 8002bbc:	6010      	str	r0, [r2, #0]
 8002bbe:	0628      	lsls	r0, r5, #24
 8002bc0:	d501      	bpl.n	8002bc6 <_printf_i+0xc2>
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e002      	b.n	8002bcc <_printf_i+0xc8>
 8002bc6:	0668      	lsls	r0, r5, #25
 8002bc8:	d5fb      	bpl.n	8002bc2 <_printf_i+0xbe>
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	296f      	cmp	r1, #111	; 0x6f
 8002bce:	bf14      	ite	ne
 8002bd0:	220a      	movne	r2, #10
 8002bd2:	2208      	moveq	r2, #8
 8002bd4:	4852      	ldr	r0, [pc, #328]	; (8002d20 <_printf_i+0x21c>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bdc:	6865      	ldr	r5, [r4, #4]
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	60a5      	str	r5, [r4, #8]
 8002be2:	f2c0 8095 	blt.w	8002d10 <_printf_i+0x20c>
 8002be6:	6821      	ldr	r1, [r4, #0]
 8002be8:	f021 0104 	bic.w	r1, r1, #4
 8002bec:	6021      	str	r1, [r4, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d13d      	bne.n	8002c6e <_printf_i+0x16a>
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	f040 808e 	bne.w	8002d14 <_printf_i+0x210>
 8002bf8:	4665      	mov	r5, ip
 8002bfa:	2a08      	cmp	r2, #8
 8002bfc:	d10b      	bne.n	8002c16 <_printf_i+0x112>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	07db      	lsls	r3, r3, #31
 8002c02:	d508      	bpl.n	8002c16 <_printf_i+0x112>
 8002c04:	6923      	ldr	r3, [r4, #16]
 8002c06:	6862      	ldr	r2, [r4, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	bfde      	ittt	le
 8002c0c:	2330      	movle	r3, #48	; 0x30
 8002c0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c16:	ebac 0305 	sub.w	r3, ip, r5
 8002c1a:	6123      	str	r3, [r4, #16]
 8002c1c:	f8cd 8000 	str.w	r8, [sp]
 8002c20:	463b      	mov	r3, r7
 8002c22:	aa03      	add	r2, sp, #12
 8002c24:	4621      	mov	r1, r4
 8002c26:	4630      	mov	r0, r6
 8002c28:	f7ff fef6 	bl	8002a18 <_printf_common>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d14d      	bne.n	8002ccc <_printf_i+0x1c8>
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	b005      	add	sp, #20
 8002c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c3a:	4839      	ldr	r0, [pc, #228]	; (8002d20 <_printf_i+0x21c>)
 8002c3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	6821      	ldr	r1, [r4, #0]
 8002c44:	1d1d      	adds	r5, r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6015      	str	r5, [r2, #0]
 8002c4a:	060a      	lsls	r2, r1, #24
 8002c4c:	d50b      	bpl.n	8002c66 <_printf_i+0x162>
 8002c4e:	07ca      	lsls	r2, r1, #31
 8002c50:	bf44      	itt	mi
 8002c52:	f041 0120 	orrmi.w	r1, r1, #32
 8002c56:	6021      	strmi	r1, [r4, #0]
 8002c58:	b91b      	cbnz	r3, 8002c62 <_printf_i+0x15e>
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	f022 0220 	bic.w	r2, r2, #32
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	e7b7      	b.n	8002bd6 <_printf_i+0xd2>
 8002c66:	064d      	lsls	r5, r1, #25
 8002c68:	bf48      	it	mi
 8002c6a:	b29b      	uxthmi	r3, r3
 8002c6c:	e7ef      	b.n	8002c4e <_printf_i+0x14a>
 8002c6e:	4665      	mov	r5, ip
 8002c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c74:	fb02 3311 	mls	r3, r2, r1, r3
 8002c78:	5cc3      	ldrb	r3, [r0, r3]
 8002c7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c7e:	460b      	mov	r3, r1
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d1f5      	bne.n	8002c70 <_printf_i+0x16c>
 8002c84:	e7b9      	b.n	8002bfa <_printf_i+0xf6>
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	6825      	ldr	r5, [r4, #0]
 8002c8a:	1d18      	adds	r0, r3, #4
 8002c8c:	6961      	ldr	r1, [r4, #20]
 8002c8e:	6010      	str	r0, [r2, #0]
 8002c90:	0628      	lsls	r0, r5, #24
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	d501      	bpl.n	8002c9a <_printf_i+0x196>
 8002c96:	6019      	str	r1, [r3, #0]
 8002c98:	e002      	b.n	8002ca0 <_printf_i+0x19c>
 8002c9a:	066a      	lsls	r2, r5, #25
 8002c9c:	d5fb      	bpl.n	8002c96 <_printf_i+0x192>
 8002c9e:	8019      	strh	r1, [r3, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	4665      	mov	r5, ip
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	e7b9      	b.n	8002c1c <_printf_i+0x118>
 8002ca8:	6813      	ldr	r3, [r2, #0]
 8002caa:	1d19      	adds	r1, r3, #4
 8002cac:	6011      	str	r1, [r2, #0]
 8002cae:	681d      	ldr	r5, [r3, #0]
 8002cb0:	6862      	ldr	r2, [r4, #4]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f000 f837 	bl	8002d28 <memchr>
 8002cba:	b108      	cbz	r0, 8002cc0 <_printf_i+0x1bc>
 8002cbc:	1b40      	subs	r0, r0, r5
 8002cbe:	6060      	str	r0, [r4, #4]
 8002cc0:	6863      	ldr	r3, [r4, #4]
 8002cc2:	6123      	str	r3, [r4, #16]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cca:	e7a7      	b.n	8002c1c <_printf_i+0x118>
 8002ccc:	6923      	ldr	r3, [r4, #16]
 8002cce:	462a      	mov	r2, r5
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	47c0      	blx	r8
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	d0aa      	beq.n	8002c30 <_printf_i+0x12c>
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	079b      	lsls	r3, r3, #30
 8002cde:	d413      	bmi.n	8002d08 <_printf_i+0x204>
 8002ce0:	68e0      	ldr	r0, [r4, #12]
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	4298      	cmp	r0, r3
 8002ce6:	bfb8      	it	lt
 8002ce8:	4618      	movlt	r0, r3
 8002cea:	e7a3      	b.n	8002c34 <_printf_i+0x130>
 8002cec:	2301      	movs	r3, #1
 8002cee:	464a      	mov	r2, r9
 8002cf0:	4639      	mov	r1, r7
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	47c0      	blx	r8
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d09a      	beq.n	8002c30 <_printf_i+0x12c>
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	68e3      	ldr	r3, [r4, #12]
 8002cfe:	9a03      	ldr	r2, [sp, #12]
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	42ab      	cmp	r3, r5
 8002d04:	dcf2      	bgt.n	8002cec <_printf_i+0x1e8>
 8002d06:	e7eb      	b.n	8002ce0 <_printf_i+0x1dc>
 8002d08:	2500      	movs	r5, #0
 8002d0a:	f104 0919 	add.w	r9, r4, #25
 8002d0e:	e7f5      	b.n	8002cfc <_printf_i+0x1f8>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ac      	bne.n	8002c6e <_printf_i+0x16a>
 8002d14:	7803      	ldrb	r3, [r0, #0]
 8002d16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d1e:	e76c      	b.n	8002bfa <_printf_i+0xf6>
 8002d20:	08003091 	.word	0x08003091
 8002d24:	080030a2 	.word	0x080030a2

08002d28 <memchr>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	b2c9      	uxtb	r1, r1
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	4603      	mov	r3, r0
 8002d32:	d101      	bne.n	8002d38 <memchr+0x10>
 8002d34:	2300      	movs	r3, #0
 8002d36:	e003      	b.n	8002d40 <memchr+0x18>
 8002d38:	781c      	ldrb	r4, [r3, #0]
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	428c      	cmp	r4, r1
 8002d3e:	d1f6      	bne.n	8002d2e <memchr+0x6>
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <memcpy>:
 8002d44:	b510      	push	{r4, lr}
 8002d46:	1e43      	subs	r3, r0, #1
 8002d48:	440a      	add	r2, r1
 8002d4a:	4291      	cmp	r1, r2
 8002d4c:	d100      	bne.n	8002d50 <memcpy+0xc>
 8002d4e:	bd10      	pop	{r4, pc}
 8002d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d58:	e7f7      	b.n	8002d4a <memcpy+0x6>

08002d5a <memmove>:
 8002d5a:	4288      	cmp	r0, r1
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	eb01 0302 	add.w	r3, r1, r2
 8002d62:	d807      	bhi.n	8002d74 <memmove+0x1a>
 8002d64:	1e42      	subs	r2, r0, #1
 8002d66:	4299      	cmp	r1, r3
 8002d68:	d00a      	beq.n	8002d80 <memmove+0x26>
 8002d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d72:	e7f8      	b.n	8002d66 <memmove+0xc>
 8002d74:	4283      	cmp	r3, r0
 8002d76:	d9f5      	bls.n	8002d64 <memmove+0xa>
 8002d78:	1881      	adds	r1, r0, r2
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	42d3      	cmn	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <memmove+0x28>
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d8a:	e7f7      	b.n	8002d7c <memmove+0x22>

08002d8c <_free_r>:
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4605      	mov	r5, r0
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d043      	beq.n	8002e1c <_free_r+0x90>
 8002d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d98:	1f0c      	subs	r4, r1, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bfb8      	it	lt
 8002d9e:	18e4      	addlt	r4, r4, r3
 8002da0:	f000 f8d0 	bl	8002f44 <__malloc_lock>
 8002da4:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <_free_r+0x94>)
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	4610      	mov	r0, r2
 8002daa:	b933      	cbnz	r3, 8002dba <_free_r+0x2e>
 8002dac:	6063      	str	r3, [r4, #4]
 8002dae:	6014      	str	r4, [r2, #0]
 8002db0:	4628      	mov	r0, r5
 8002db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002db6:	f000 b8c6 	b.w	8002f46 <__malloc_unlock>
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	d90b      	bls.n	8002dd6 <_free_r+0x4a>
 8002dbe:	6821      	ldr	r1, [r4, #0]
 8002dc0:	1862      	adds	r2, r4, r1
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	bf01      	itttt	eq
 8002dc6:	681a      	ldreq	r2, [r3, #0]
 8002dc8:	685b      	ldreq	r3, [r3, #4]
 8002dca:	1852      	addeq	r2, r2, r1
 8002dcc:	6022      	streq	r2, [r4, #0]
 8002dce:	6063      	str	r3, [r4, #4]
 8002dd0:	6004      	str	r4, [r0, #0]
 8002dd2:	e7ed      	b.n	8002db0 <_free_r+0x24>
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	b10a      	cbz	r2, 8002dde <_free_r+0x52>
 8002dda:	42a2      	cmp	r2, r4
 8002ddc:	d9fa      	bls.n	8002dd4 <_free_r+0x48>
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	1858      	adds	r0, r3, r1
 8002de2:	42a0      	cmp	r0, r4
 8002de4:	d10b      	bne.n	8002dfe <_free_r+0x72>
 8002de6:	6820      	ldr	r0, [r4, #0]
 8002de8:	4401      	add	r1, r0
 8002dea:	1858      	adds	r0, r3, r1
 8002dec:	4282      	cmp	r2, r0
 8002dee:	6019      	str	r1, [r3, #0]
 8002df0:	d1de      	bne.n	8002db0 <_free_r+0x24>
 8002df2:	6810      	ldr	r0, [r2, #0]
 8002df4:	6852      	ldr	r2, [r2, #4]
 8002df6:	4401      	add	r1, r0
 8002df8:	6019      	str	r1, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	e7d8      	b.n	8002db0 <_free_r+0x24>
 8002dfe:	d902      	bls.n	8002e06 <_free_r+0x7a>
 8002e00:	230c      	movs	r3, #12
 8002e02:	602b      	str	r3, [r5, #0]
 8002e04:	e7d4      	b.n	8002db0 <_free_r+0x24>
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	1821      	adds	r1, r4, r0
 8002e0a:	428a      	cmp	r2, r1
 8002e0c:	bf01      	itttt	eq
 8002e0e:	6811      	ldreq	r1, [r2, #0]
 8002e10:	6852      	ldreq	r2, [r2, #4]
 8002e12:	1809      	addeq	r1, r1, r0
 8002e14:	6021      	streq	r1, [r4, #0]
 8002e16:	6062      	str	r2, [r4, #4]
 8002e18:	605c      	str	r4, [r3, #4]
 8002e1a:	e7c9      	b.n	8002db0 <_free_r+0x24>
 8002e1c:	bd38      	pop	{r3, r4, r5, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000094 	.word	0x20000094

08002e24 <_malloc_r>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	1ccd      	adds	r5, r1, #3
 8002e28:	f025 0503 	bic.w	r5, r5, #3
 8002e2c:	3508      	adds	r5, #8
 8002e2e:	2d0c      	cmp	r5, #12
 8002e30:	bf38      	it	cc
 8002e32:	250c      	movcc	r5, #12
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	4606      	mov	r6, r0
 8002e38:	db01      	blt.n	8002e3e <_malloc_r+0x1a>
 8002e3a:	42a9      	cmp	r1, r5
 8002e3c:	d903      	bls.n	8002e46 <_malloc_r+0x22>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	6033      	str	r3, [r6, #0]
 8002e42:	2000      	movs	r0, #0
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	f000 f87d 	bl	8002f44 <__malloc_lock>
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <_malloc_r+0xac>)
 8002e4c:	6814      	ldr	r4, [r2, #0]
 8002e4e:	4621      	mov	r1, r4
 8002e50:	b991      	cbnz	r1, 8002e78 <_malloc_r+0x54>
 8002e52:	4c20      	ldr	r4, [pc, #128]	; (8002ed4 <_malloc_r+0xb0>)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	b91b      	cbnz	r3, 8002e60 <_malloc_r+0x3c>
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f000 f863 	bl	8002f24 <_sbrk_r>
 8002e5e:	6020      	str	r0, [r4, #0]
 8002e60:	4629      	mov	r1, r5
 8002e62:	4630      	mov	r0, r6
 8002e64:	f000 f85e 	bl	8002f24 <_sbrk_r>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d124      	bne.n	8002eb6 <_malloc_r+0x92>
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	4630      	mov	r0, r6
 8002e70:	6033      	str	r3, [r6, #0]
 8002e72:	f000 f868 	bl	8002f46 <__malloc_unlock>
 8002e76:	e7e4      	b.n	8002e42 <_malloc_r+0x1e>
 8002e78:	680b      	ldr	r3, [r1, #0]
 8002e7a:	1b5b      	subs	r3, r3, r5
 8002e7c:	d418      	bmi.n	8002eb0 <_malloc_r+0x8c>
 8002e7e:	2b0b      	cmp	r3, #11
 8002e80:	d90f      	bls.n	8002ea2 <_malloc_r+0x7e>
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	18cc      	adds	r4, r1, r3
 8002e86:	50cd      	str	r5, [r1, r3]
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f000 f85c 	bl	8002f46 <__malloc_unlock>
 8002e8e:	f104 000b 	add.w	r0, r4, #11
 8002e92:	1d23      	adds	r3, r4, #4
 8002e94:	f020 0007 	bic.w	r0, r0, #7
 8002e98:	1ac3      	subs	r3, r0, r3
 8002e9a:	d0d3      	beq.n	8002e44 <_malloc_r+0x20>
 8002e9c:	425a      	negs	r2, r3
 8002e9e:	50e2      	str	r2, [r4, r3]
 8002ea0:	e7d0      	b.n	8002e44 <_malloc_r+0x20>
 8002ea2:	684b      	ldr	r3, [r1, #4]
 8002ea4:	428c      	cmp	r4, r1
 8002ea6:	bf16      	itet	ne
 8002ea8:	6063      	strne	r3, [r4, #4]
 8002eaa:	6013      	streq	r3, [r2, #0]
 8002eac:	460c      	movne	r4, r1
 8002eae:	e7eb      	b.n	8002e88 <_malloc_r+0x64>
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	6849      	ldr	r1, [r1, #4]
 8002eb4:	e7cc      	b.n	8002e50 <_malloc_r+0x2c>
 8002eb6:	1cc4      	adds	r4, r0, #3
 8002eb8:	f024 0403 	bic.w	r4, r4, #3
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d005      	beq.n	8002ecc <_malloc_r+0xa8>
 8002ec0:	1a21      	subs	r1, r4, r0
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f000 f82e 	bl	8002f24 <_sbrk_r>
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d0cf      	beq.n	8002e6c <_malloc_r+0x48>
 8002ecc:	6025      	str	r5, [r4, #0]
 8002ece:	e7db      	b.n	8002e88 <_malloc_r+0x64>
 8002ed0:	20000094 	.word	0x20000094
 8002ed4:	20000098 	.word	0x20000098

08002ed8 <_realloc_r>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	4607      	mov	r7, r0
 8002edc:	4614      	mov	r4, r2
 8002ede:	460e      	mov	r6, r1
 8002ee0:	b921      	cbnz	r1, 8002eec <_realloc_r+0x14>
 8002ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	f7ff bf9c 	b.w	8002e24 <_malloc_r>
 8002eec:	b922      	cbnz	r2, 8002ef8 <_realloc_r+0x20>
 8002eee:	f7ff ff4d 	bl	8002d8c <_free_r>
 8002ef2:	4625      	mov	r5, r4
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef8:	f000 f826 	bl	8002f48 <_malloc_usable_size_r>
 8002efc:	42a0      	cmp	r0, r4
 8002efe:	d20f      	bcs.n	8002f20 <_realloc_r+0x48>
 8002f00:	4621      	mov	r1, r4
 8002f02:	4638      	mov	r0, r7
 8002f04:	f7ff ff8e 	bl	8002e24 <_malloc_r>
 8002f08:	4605      	mov	r5, r0
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d0f2      	beq.n	8002ef4 <_realloc_r+0x1c>
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4622      	mov	r2, r4
 8002f12:	f7ff ff17 	bl	8002d44 <memcpy>
 8002f16:	4631      	mov	r1, r6
 8002f18:	4638      	mov	r0, r7
 8002f1a:	f7ff ff37 	bl	8002d8c <_free_r>
 8002f1e:	e7e9      	b.n	8002ef4 <_realloc_r+0x1c>
 8002f20:	4635      	mov	r5, r6
 8002f22:	e7e7      	b.n	8002ef4 <_realloc_r+0x1c>

08002f24 <_sbrk_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	2300      	movs	r3, #0
 8002f28:	4c05      	ldr	r4, [pc, #20]	; (8002f40 <_sbrk_r+0x1c>)
 8002f2a:	4605      	mov	r5, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	f7fd fe84 	bl	8000c3c <_sbrk>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d102      	bne.n	8002f3e <_sbrk_r+0x1a>
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	b103      	cbz	r3, 8002f3e <_sbrk_r+0x1a>
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	bd38      	pop	{r3, r4, r5, pc}
 8002f40:	200001b0 	.word	0x200001b0

08002f44 <__malloc_lock>:
 8002f44:	4770      	bx	lr

08002f46 <__malloc_unlock>:
 8002f46:	4770      	bx	lr

08002f48 <_malloc_usable_size_r>:
 8002f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f4c:	1f18      	subs	r0, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bfbc      	itt	lt
 8002f52:	580b      	ldrlt	r3, [r1, r0]
 8002f54:	18c0      	addlt	r0, r0, r3
 8002f56:	4770      	bx	lr

08002f58 <_init>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr

08002f64 <_fini>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr
